name: E2E Tests with Kind

on:
  push:
  pull_request:

jobs:
  test-e2e:
    name: Run on Ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Clone the code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Create KinD Cluster
        uses: helm/kind-action@v1.10.0
        with:
          cluster_name: kind
          config: kind-config.yaml

      - name: Build container image with Podman
        run: |
          # Define image name and tag
          IMAGE_NAME="localhost/coverage-http-demo:test"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

          # Build the image using Podman
          podman build --build-arg ENABLE_COVERAGE=true -t $IMAGE_NAME -f Dockerfile.local .

      - name: Load image into KinD cluster
        run: |
          podman image save -o built-image.tar ${{ env.IMAGE_NAME }}
          kind load image-archive built-image.tar

      - name: Deploy application
        run: |
          # Apply the Kubernetes deployment manifest
          kubectl apply -f k8s-deployment.yaml

          # Wait for the deployment to be ready before running tests
          kubectl wait --for=condition=Available deployment/coverage-demo -n coverage-demo --timeout=120s
          
          # Wait for pod to be fully ready
          kubectl wait --for=condition=Ready pod -l app=coverage-demo -n coverage-demo --timeout=60s
          
          # Give the service a moment to establish port mapping
          echo "Waiting for service to be accessible..."
          for i in {1..30}; do
            if curl -f http://127.0.0.1:8000/health 2>/dev/null; then
              echo "Service is accessible!"
              break
            fi
            echo "Attempt $i: Service not ready yet, retrying..."
            sleep 2
          done
          
          # Verify service is accessible
          curl -v http://127.0.0.1:8000/health

      - name: Run E2E Go Tests
        run: |
          # Run the tests and generate coverage report
          cd test
          go test -v ./...
          cp coverage-output/e2e-tests/coverage_filtered.out ../coverage.out

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.out
          flags: e2e-tests 
        # This step runs only on the main branch to avoid uploading reports from forks without a secret.
        if: github.repository == 'psturc/go-coverage-http'

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v6.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        # This step runs only on the main branch to avoid uploading reports from forks without a secret.
        if: github.repository == 'psturc/go-coverage-http'