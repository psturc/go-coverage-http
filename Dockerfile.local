FROM golang:1.24-bookworm AS builder

# Build argument to control coverage instrumentation
# This Dockerfile uses a LOCAL copy of server/coverage_server.go
# Use this for local development/testing before publishing to GitHub
ARG ENABLE_COVERAGE=false

WORKDIR /app

# Copy main application code
COPY example_app.go ./

# Copy coverage server if building with coverage
# For production Dockerfile, this is downloaded from GitHub instead
COPY server/coverage_server.go ./

# Conditional build based on ENABLE_COVERAGE
RUN if [ "$ENABLE_COVERAGE" = "true" ]; then \
        echo "ðŸ§ª Building with coverage instrumentation (local server/coverage_server.go)..."; \
        CGO_ENABLED=0 go build -cover -covermode=atomic -o app example_app.go coverage_server.go; \
        echo "âœ… Test build complete (with coverage)"; \
    else \
        echo "ðŸš€ Building production binary..."; \
        CGO_ENABLED=0 go build -o app example_app.go; \
        echo "âœ… Production build complete (no coverage)"; \
    fi

# Runtime stage
FROM alpine:3.19

WORKDIR /app

# Copy the binary
COPY --from=builder /app/app /app/app

# Metadata
ENV APP_NAME=coverage-http-demo
ENV APP_VERSION=1.0.0

USER 65532:65532

# Run the application
CMD ["/app/app"]

